import { assert, test } from '@codemod-utils/tests';

import { updateInvocations } from '../../../../src/utils/update-template/index.js';
import {
  componentsDoubleColonized,
  entities,
} from '../../../helpers/mocks/index.js';

test('utils | update-template | update-invocations > Glimmer component', function () {
  const oldFile = [
    `import { action } from '@ember/object';`,
    `import Component from '@glimmer/component';`,
    `import type { WithBoundArgs } from '@glint/template';`,
    `import { TrackedObject } from 'tracked-built-ins';`,
    ``,
    `import styles from './form.css';`,
    `import type UiFormCheckbox from './form/checkbox.ts';`,
    `import type UiFormInput from './form/input.ts';`,
    `import type UiFormNumber from './form/number.ts';`,
    `import type UiFormSelect from './form/select.ts';`,
    `import type UiFormTextarea from './form/textarea.ts';`,
    ``,
    `interface UiFormSignature {`,
    `  Args: {`,
    `    data?: Record<string, unknown>;`,
    `    instructions?: string;`,
    `    onSubmit: (data: Record<string, unknown>) => Promise<void>;`,
    `    title?: string;`,
    `  };`,
    `  Blocks: {`,
    `    default: [`,
    `      {`,
    `        Checkbox: WithBoundArgs<`,
    `          typeof UiFormCheckbox,`,
    `          'data' | 'isInline' | 'isWide' | 'onUpdate'`,
    `        >;`,
    `        Input: WithBoundArgs<`,
    `          typeof UiFormInput,`,
    `          'data' | 'isWide' | 'onUpdate'`,
    `        >;`,
    `        Number: WithBoundArgs<`,
    `          typeof UiFormNumber,`,
    `          'data' | 'isWide' | 'onUpdate'`,
    `        >;`,
    `        Select: WithBoundArgs<`,
    `          typeof UiFormSelect,`,
    `          'data' | 'isWide' | 'onUpdate'`,
    `        >;`,
    `        Textarea: WithBoundArgs<`,
    `          typeof UiFormTextarea,`,
    `          'data' | 'isWide' | 'onUpdate'`,
    `        >;`,
    `      },`,
    `    ];`,
    `  };`,
    `}`,
    ``,
    `export default class UiFormComponent extends Component<UiFormSignature> {`,
    `  data = new TrackedObject<Record<string, unknown>>(this.args.data ?? {});`,
    ``,
    `  styles = styles;`,
    ``,
    `  @action async submitForm(event: SubmitEvent): Promise<void> {`,
    `    event.preventDefault();`,
    ``,
    `    await this.args.onSubmit(this.data);`,
    `  }`,
    ``,
    `  @action updateData({ key, value }: { key: string; value: unknown }): void {`,
    `    this.data[key] = value;`,
    `  }`,
    ``,
    `  <template>`,
    `    {{#let (unique-id) as |formId|}}`,
    `      <form`,
    `        aria-describedby={{if`,
    `          @instructions`,
    `          (concat formId "-instructions")`,
    `        }}`,
    `        aria-labelledby={{if @title (concat formId "-title")}}`,
    `        class={{this.styles.form}}`,
    `        data-test-form={{if @title @title ""}}`,
    `        {{autofocus}}`,
    `        {{on "submit" this.submitForm}}`,
    `      >`,
    `        <Ui::Form::Information`,
    `          @formId={{formId}}`,
    `          @instructions={{@instructions}}`,
    `          @title={{@title}}`,
    `        />`,
    ``,
    `        <ContainerQuery`,
    `          @features={{hash wide=(width min=480)}}`,
    `          as |CQ|`,
    `        >`,
    `          {{yield`,
    `            (hash`,
    `              Checkbox=(component`,
    `                "ui/form/checkbox"`,
    `                changeset=this.changeset`,
    `                isInline=true`,
    `                isWide=CQ.features.wide`,
    `                onUpdate=this.updateChangeset`,
    `              )`,
    `              Input=(component`,
    `                "ui/form/input"`,
    `                changeset=this.changeset`,
    `                isWide=CQ.features.wide`,
    `                onUpdate=this.updateChangeset`,
    `              )`,
    `              Number=(component`,
    `                "ui/form/number"`,
    `                changeset=this.changeset`,
    `                isWide=CQ.features.wide`,
    `                onUpdate=this.updateChangeset`,
    `              )`,
    `              Select=(component`,
    `                "ui/form/select"`,
    `                changeset=this.changeset`,
    `                isWide=CQ.features.wide`,
    `                onUpdate=this.updateChangeset`,
    `              )`,
    `              Textarea=(component`,
    `                "ui/form/textarea"`,
    `                changeset=this.changeset`,
    `                isWide=CQ.features.wide`,
    `                onUpdate=this.updateChangeset`,
    `              )`,
    `            )`,
    `          }}`,
    `        </ContainerQuery>`,
    ``,
    `        <div class={{this.styles.actions}}>`,
    `          <button`,
    `            class={{this.styles.submit-button}}`,
    `            data-test-button="Submit"`,
    `            type="submit"`,
    `          >`,
    `            {{t "components.ui.form.submit"}}`,
    `          </button>`,
    `        </div>`,
    `      </form>`,
    `    {{/let}}`,
    `  </template>`,
    `}`,
    ``,
  ].join('\n');

  const newFile = updateInvocations(oldFile, {
    componentsDoubleColonized,
    entities,
  });

  assert.strictEqual(
    newFile,
    [
      `import { concat, hash, uniqueId } from '@ember/helper';`,
      `import { on } from '@ember/modifier';`,
      `import { ContainerQuery, width } from 'ember-container-query';`,
      `import { t } from 'ember-intl';`,
      `import { UiFormCheckbox, UiFormInformation, UiFormInput, UiFormNumber, UiFormSelect, UiFormTextarea, autofocus } from 'my-addon';`,
      ``,
      `import { action } from '@ember/object';`,
      `import Component from '@glimmer/component';`,
      `import type { WithBoundArgs } from '@glint/template';`,
      `import { TrackedObject } from 'tracked-built-ins';`,
      ``,
      `import styles from './form.css';`,
      `import type UiFormCheckbox from './form/checkbox.ts';`,
      `import type UiFormInput from './form/input.ts';`,
      `import type UiFormNumber from './form/number.ts';`,
      `import type UiFormSelect from './form/select.ts';`,
      `import type UiFormTextarea from './form/textarea.ts';`,
      ``,
      `interface UiFormSignature {`,
      `  Args: {`,
      `    data?: Record<string, unknown>;`,
      `    instructions?: string;`,
      `    onSubmit: (data: Record<string, unknown>) => Promise<void>;`,
      `    title?: string;`,
      `  };`,
      `  Blocks: {`,
      `    default: [`,
      `      {`,
      `        Checkbox: WithBoundArgs<`,
      `          typeof UiFormCheckbox,`,
      `          'data' | 'isInline' | 'isWide' | 'onUpdate'`,
      `        >;`,
      `        Input: WithBoundArgs<`,
      `          typeof UiFormInput,`,
      `          'data' | 'isWide' | 'onUpdate'`,
      `        >;`,
      `        Number: WithBoundArgs<`,
      `          typeof UiFormNumber,`,
      `          'data' | 'isWide' | 'onUpdate'`,
      `        >;`,
      `        Select: WithBoundArgs<`,
      `          typeof UiFormSelect,`,
      `          'data' | 'isWide' | 'onUpdate'`,
      `        >;`,
      `        Textarea: WithBoundArgs<`,
      `          typeof UiFormTextarea,`,
      `          'data' | 'isWide' | 'onUpdate'`,
      `        >;`,
      `      },`,
      `    ];`,
      `  };`,
      `}`,
      ``,
      `export default class UiFormComponent extends Component<UiFormSignature> {`,
      `  data = new TrackedObject<Record<string, unknown>>(this.args.data ?? {});`,
      ``,
      `  styles = styles;`,
      ``,
      `  @action async submitForm(event: SubmitEvent): Promise<void> {`,
      `    event.preventDefault();`,
      ``,
      `    await this.args.onSubmit(this.data);`,
      `  }`,
      ``,
      `  @action updateData({ key, value }: { key: string; value: unknown }): void {`,
      `    this.data[key] = value;`,
      `  }`,
      ``,
      `  <template>`,
      `    {{#let (uniqueId) as |formId|}}`,
      `      <form`,
      `        aria-describedby={{if`,
      `          @instructions`,
      `          (concat formId "-instructions")`,
      `        }}`,
      `        aria-labelledby={{if @title (concat formId "-title")}}`,
      `        class={{this.styles.form}}`,
      `        data-test-form={{if @title @title ""}}`,
      `        {{autofocus}}`,
      `        {{on "submit" this.submitForm}}`,
      `      >`,
      `        <UiFormInformation`,
      `          @formId={{formId}}`,
      `          @instructions={{@instructions}}`,
      `          @title={{@title}}`,
      `        />`,
      ``,
      `        <ContainerQuery`,
      `          @features={{hash wide=(width min=480)}}`,
      `          as |CQ|`,
      `        >`,
      `          {{yield`,
      `            (hash`,
      `              Checkbox=(component`,
      `                UiFormCheckbox`,
      `                changeset=this.changeset`,
      `                isInline=true`,
      `                isWide=CQ.features.wide`,
      `                onUpdate=this.updateChangeset`,
      `              )`,
      `              Input=(component`,
      `                UiFormInput`,
      `                changeset=this.changeset`,
      `                isWide=CQ.features.wide`,
      `                onUpdate=this.updateChangeset`,
      `              )`,
      `              Number=(component`,
      `                UiFormNumber`,
      `                changeset=this.changeset`,
      `                isWide=CQ.features.wide`,
      `                onUpdate=this.updateChangeset`,
      `              )`,
      `              Select=(component`,
      `                UiFormSelect`,
      `                changeset=this.changeset`,
      `                isWide=CQ.features.wide`,
      `                onUpdate=this.updateChangeset`,
      `              )`,
      `              Textarea=(component`,
      `                UiFormTextarea`,
      `                changeset=this.changeset`,
      `                isWide=CQ.features.wide`,
      `                onUpdate=this.updateChangeset`,
      `              )`,
      `            )`,
      `          }}`,
      `        </ContainerQuery>`,
      ``,
      `        <div class={{this.styles.actions}}>`,
      `          <button`,
      `            class={{this.styles.submit-button}}`,
      `            data-test-button="Submit"`,
      `            type="submit"`,
      `          >`,
      `            {{t "components.ui.form.submit"}}`,
      `          </button>`,
      `        </div>`,
      `      </form>`,
      `    {{/let}}`,
      `  </template>`,
      `}`,
      ``,
    ].join('\n'),
  );
});
