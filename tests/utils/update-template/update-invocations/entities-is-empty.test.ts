import { assert, test } from '@codemod-utils/tests';

import { updateInvocations } from '../../../../src/utils/update-template/index.js';

test('utils | update-template | update-invocations > entities is empty', function () {
  const oldFile = [
    `<template>`,
    `  {{#let (unique-id) as |formId|}}`,
    `    <form`,
    `      aria-describedby={{if`,
    `        @instructions`,
    `        (concat formId "-instructions")`,
    `      }}`,
    `      aria-labelledby={{if @title (concat formId "-title")}}`,
    `      class={{this.styles.form}}`,
    `      data-test-form={{if @title @title ""}}`,
    `      {{autofocus}}`,
    `      {{on "submit" this.submitForm}}`,
    `    >`,
    `      <Ui::Form::Information`,
    `        @formId={{formId}}`,
    `        @instructions={{@instructions}}`,
    `        @title={{@title}}`,
    `      />`,
    ``,
    `      <ContainerQuery`,
    `        @features={{hash wide=(width min=480)}}`,
    `        as |CQ|`,
    `      >`,
    `        {{yield`,
    `          (hash`,
    `            Checkbox=(component`,
    `              "ui/form/checkbox"`,
    `              changeset=this.changeset`,
    `              isInline=true`,
    `              isWide=CQ.features.wide`,
    `              onUpdate=this.updateChangeset`,
    `            )`,
    `            Input=(component`,
    `              "ui/form/input"`,
    `              changeset=this.changeset`,
    `              isWide=CQ.features.wide`,
    `              onUpdate=this.updateChangeset`,
    `            )`,
    `            Number=(component`,
    `              "ui/form/number"`,
    `              changeset=this.changeset`,
    `              isWide=CQ.features.wide`,
    `              onUpdate=this.updateChangeset`,
    `            )`,
    `            Select=(component`,
    `              "ui/form/select"`,
    `              changeset=this.changeset`,
    `              isWide=CQ.features.wide`,
    `              onUpdate=this.updateChangeset`,
    `            )`,
    `            Textarea=(component`,
    `              "ui/form/textarea"`,
    `              changeset=this.changeset`,
    `              isWide=CQ.features.wide`,
    `              onUpdate=this.updateChangeset`,
    `            )`,
    `          )`,
    `        }}`,
    `      </ContainerQuery>`,
    ``,
    `      <div class={{this.styles.actions}}>`,
    `        <button`,
    `          class={{this.styles.submit-button}}`,
    `          data-test-button="Submit"`,
    `          type="submit"`,
    `        >`,
    `          {{t "components.ui.form.submit"}}`,
    `        </button>`,
    `      </div>`,
    `    </form>`,
    `  {{/let}}`,
    `</template>`,
    ``,
  ].join('\n');

  const newFile = updateInvocations(oldFile, {
    componentsDoubleColonized: new Map(),
    entities: {
      components: new Map(),
      helpers: new Map(),
      modifiers: new Map(),
    },
  });

  assert.strictEqual(newFile, oldFile);
});
