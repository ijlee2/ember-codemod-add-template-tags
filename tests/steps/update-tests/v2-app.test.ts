import { assertFixture, loadFixture, test } from '@codemod-utils/tests';

import { findEntities, updateTests } from '../../../src/steps/index.js';
import {
  inputProject,
  options,
  packages,
} from '../../helpers/shared-test-setups/my-v2-app.js';

test('steps | update-tests > v2-app', function () {
  const outputProject = {
    app: {
      components: {
        ui: {
          form: {
            'checkbox.hbs': ``,
            'checkbox.ts': [
              `import Component from '@glimmer/component';`,
              ``,
              `interface UiFormCheckboxSignature {}`,
              ``,
              `export default class UiFormCheckbox extends Component<UiFormCheckboxSignature> {}`,
              ``,
              `declare module '@glint/environment-ember-loose/registry' {`,
              `  export default interface Registry {`,
              `    'Ui::Form::Checkbox': typeof UiFormCheckbox;`,
              `    'ui/form/checkbox': typeof UiFormCheckbox;`,
              `  }`,
              `}`,
              ``,
            ].join('\n'),
            'field.hbs': ``,
            'field.ts': [
              `import Component from '@glimmer/component';`,
              ``,
              `interface UiFormFieldSignature {}`,
              ``,
              `export default class UiFormField extends Component<UiFormFieldSignature> {}`,
              ``,
            ].join('\n'),
            'information.hbs': ``,
            'information.ts': [
              `import templateOnlyComponent from '@ember/component/template-only';`,
              ``,
              `interface UiFormInformationSignature {}`,
              ``,
              `const UiFormInformation = templateOnlyComponent<UiFormInformationSignature>();`,
              ``,
              `export default UiFormInformation;`,
              ``,
              `declare module '@glint/environment-ember-loose/registry' {`,
              `  export default interface Registry {`,
              `    'Ui::Form::Information': typeof UiFormInformation;`,
              `    'ui/form/information': typeof UiFormInformation;`,
              `  }`,
              `}`,
              ``,
            ].join('\n'),
            'input.hbs': ``,
            'input.js': [
              `import Component from '@glimmer/component';`,
              ``,
              `export default class UiFormInput extends Component {}`,
              ``,
            ].join('\n'),
            'number.gts': ``,
            'select.hbs': ``,
            'select.ts': [
              `import Component from '@glimmer/component';`,
              ``,
              `interface UiFormSelectSignature {}`,
              ``,
              `export default class UiFormSelect extends Component<UiFormSelectSignature> {}`,
              ``,
            ].join('\n'),
            'textarea.gjs': ``,
          },
          'form.hbs': ``,
          'form.ts': [
            `import Component from '@glimmer/component';`,
            ``,
            `interface UiFormSignature {}`,
            ``,
            `export default class UiForm extends Component<UiFormSignature> {}`,
            ``,
          ].join('\n'),
          'page.hbs': ``,
          'page.js': [
            `import templateOnlyComponent from '@ember/component/template-only';`,
            ``,
            `const UiPage = templateOnlyComponent();`,
            ``,
            `export default UiPage;`,
            ``,
          ].join('\n'),
        },
        'navigation-menu.hbs': '',
        'select-locale.hbs': '',
        'select-locale.js': [
          `import Component from '@glimmer/component';`,
          ``,
          `export default class SelectLocale extends Component {}`,
          ``,
        ].join('\n'),
      },
      templates: {
        'application.hbs': [
          `<header>`,
          `  <NavigationMenu />`,
          `</header>`,
          ``,
          `<main>`,
          `  {{outlet}}`,
          `</main>`,
        ].join('\n'),
        'index.hbs': `<SelectLocale />`,
      },
    },
    tests: {
      integration: {
        components: {
          ui: {
            form: {
              'checkbox-test.gts': [
                `import UiFormCheckbox from 'my-v2-app/components/ui/form/checkbox';`,
                ``,
                `import {`,
                `  render,`,
                `  type TestContext as BaseTestContext,`,
                `} from '@ember/test-helpers';`,
                `import { UiForm } from 'my-addon/test-support';`,
                `import { setupRenderingTest } from 'my-v2-app/tests/helpers';`,
                `import { module, test } from 'qunit';`,
                ``,
                `interface TestContext extends BaseTestContext {`,
                `  parent: UiForm;`,
                `}`,
                ``,
                `module('Integration | Component | ui/form/checkbox', function (hooks) {`,
                `  setupRenderingTest(hooks);`,
                ``,
                `  hooks.beforeEach(function (this: TestContext) {`,
                `    this.parent = new UiForm();`,
                `  });`,
                ``,
                `  test('it renders', async function (this: TestContext, assert) {`,
                `    const self = this;`,
                ``,
                ``,
                ``,
                ``,
                `    await render(<template>`,
                `    <UiFormCheckbox`,
                `      @data={{self.parent.data}}`,
                `      @key="subscribe"`,
                `      @label="Subscribe to The Ember Times?"`,
                `      @onUpdate={{self.parent.updateData}}`,
                `    />`,
                `    </template>);`,
                ``,
                `    assert.ok(true);`,
                `  });`,
                `});`,
                ``,
              ].join('\n'),
              'field-test.gts': '',
              'information-test.gts': '',
              'input-test.gjs': '',
              'number-test.gts': '',
              'select-test.gts': '',
              'textarea-test.gjs': [
                `import UiFormTextarea from 'my-v2-app/components/ui/form/textarea';`,
                ``,
                `import { render } from '@ember/test-helpers';`,
                `import { setupRenderingTest } from 'my-v2-app/tests/helpers';`,
                `import { module, test } from 'qunit';`,
                ``,
                `module('Integration | Component | ui/form/textarea', function (hooks) {`,
                `  setupRenderingTest(hooks);`,
                ``,
                `  hooks.beforeEach(function () {`,
                `    this.data = {`,
                `      email: 'zoey@emberjs.com',`,
                `      message: 'I ðŸ§¡ container queries!',`,
                `      name: 'Zoey',`,
                `      subscribe: false,`,
                `    };`,
                ``,
                `    this.updateData = () => {`,
                `      // Do nothing`,
                `    };`,
                `  });`,
                ``,
                `  test('it renders', async function (assert) {`,
                `    const self = this;`,
                ``,
                ``,
                ``,
                ``,
                `    await render(<template>`,
                `    <UiFormTextarea`,
                `      @data={{self.data}}`,
                `      @key="message"`,
                `      @label="Message"`,
                `      @onUpdate={{self.updateData}}`,
                `    />`,
                `    </template>);`,
                ``,
                `    assert.ok(true);`,
                `  });`,
                `});`,
                ``,
              ].join('\n'),
            },
            'form-test.gts': '',
            'page-test.gjs': '',
          },
          'navigation-menu-test.gjs': '',
          'select-locale-test.gjs': '',
        },
      },
    },
    'package.json': JSON.stringify({
      name: 'my-v2-app',
      version: '1.0.0',
      devDependencies: {
        '@embroider/vite': '^1.2.0',
        'ember-source': '~6.7.0',
      },
    }),
  };

  loadFixture(inputProject, options);

  const entities = findEntities(options);

  updateTests(packages, entities);

  assertFixture(outputProject, options);
});
